//: Playground - noun: a place where people can play


import Cocoa
// ‚Üì ARRAYS

var shoppingList: [String] = ["Eggs", "Milk"]
print("The shopping list contains \(shoppingList.count) items.")

if shoppingList.isEmpty {
    print("The shopping list is empty.")
} else {
    print("The shopping list is not empty.")
}
shoppingList.append("Flour")
shoppingList += ["Baking Powder"]
shoppingList += ["Chocolate Spread", "Cheese", "Butter"]
var firstItem = shoppingList[0]
shoppingList[0] = "Six eggs"
// –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–µ–Ω "Six eggs", –∞ –Ω–µ "Eggs"
shoppingList[4...6] = ["Bananas", "Apples"]
// shoppingList —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ–∂–∏—Ç 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
shoppingList.insert("Maple Syrup", atIndex: 0)
// shoppingList —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç 7 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
// "Maple Syrup" —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
let mapleSyrup = shoppingList.removeAtIndex(0)
// —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–ª –∏–Ω–¥–µ–∫—Å 0 –±—ã–ª —É–¥–∞–ª–µ–Ω
// shoppingList —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∏ –Ω–µ—Ç Maple Syrup
// –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ mapleSyrup —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ "Maple Syrup"
firstItem = shoppingList[0]
// firstItem —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–µ–Ω "Six eggs"

for item in shoppingList {
    print(item)
}
// Six eggs
// Milk
// Flour
// Baking Powder
// Bananas
func changecolor(color: String) -> String {
    let wow = "this is a " + color + " color!"
    return wow
}
print(changecolor("blue"))
print(changecolor("red"))
var str = "Hello, playground"
var firstNumber = 2
var secondNumber = 3
var totalSum = firstNumber + secondNumber
firstNumber = firstNumber + 1
secondNumber = secondNumber + 1
totalSum = firstNumber + secondNumber
print("totalSum = \(totalSum)")
for i in 1...12 {
    print("I is \(i)")
}
for i in 1...12 {
    var j = (i-7) * (i-6)
    print("I is \(i)")
}
for i in 1...12 {
    var j = (i-7) * (i-6)
    var k = i
    print("I is \(i)")
}
var myInt8: Int8 = 124
if convertedNumber != nil {
    print("convertedNumber has an integer value of \(convertedNumber!).")
}
if let actualNumber = Int(possibleNumber) {
    print("\(possibleNumber) has an integer value of \(actualNumber)")
} else {
    print("\(possibleNumber) could not be converted to an integer")
}
if let firstNumber = Int("4"), secondNumber = Int("42") where firstNumber <
    secondNumber {
    print("\(firstNumber) < \(secondNumber)")
    }



// ‚Üì OPERATORS

//myString = "hello" + " world"
var myNumbers = 123 * 12
myNumbers = 12+37*(4-45)/34+42

if 3>5 || 2<5 {
    print(true)
} else {
    print(false)
}

if 3>5 && 2<5 {
    print(true)
} else {
    print(false)
}
var a: Int = 12456
var b: Int = 4567
if  a < b {
    print(true)
} else {
print ("Snow is not black!üò°")
}


var m = 234, c = 456
var result: Bool = m<c
if  !result  {
    print(!true)
} else {
    print(!false)
}

// initialization ‚Üì

var figa: UInt8
var goga: Int8
figa = UInt8.min
goga = Int8.max
print(figa)
print(goga)
var figa2: Int=2
var goga2=3
goga2=figa2
figa2=3

var mega2 = "800 dogs"
let number3 = 3.561
let number1: Float
var number2: Double
number2 = 4.75

let onex: Int = 18
let rwox: Double = 5.7
let threez: Float = 16.3
var sum = Float(onex) + Float(rwox) + threez
var pro = Int(Double(onex) * rwox * Double(threez)) + 1
pro += 1
var mod = Double(threez) % rwox
var dif =  Int(Double(threez) / rwox) / 2
var mega3 = mega2.characters
mega3.count

var gong: String = "koromyslo "
var host: Character = "h"
var summa = gong + String( host) + " " + String(onex + Int(rwox))
print(summa)

// LOGICAL OPERATORS

var fantom = false
var real = true
let pravo = !fantom && real
let left = fantom || real

1+1<3

//TUPLES

var car = ( logo: "TOYOTA" , engine: "2L", color: "blue", trnsm: " "  , price: 20000)
car.engine = "3L"
car.0 = "POLO"
print(car)
car.4 *= 2
print(car)
car.1 += " + IT"
print(car)
 var automat = true
if automat{
car.3 = "automat"
} else {
car.3 = "mechanic"
}
print(car)
var (logo, engine, color, trnsm, price) = car
print( "logo of car is \(logo)")
logo = "porshe"
engine = "5L"
print(car)

// ‚Üì OPTIONALS


var optString = Optional ("" )
optString!

optString! = "some value"
optString = optString! + " is prospect"
optString = optString! + " is prospect"
print(optString)
optString = nil
//optString : String = "plot"

var myString = optString

var regularString: String = "basic"
print(regularString)
regularString = regularString + " pro"
regularString
if optString != nil {
    print(optString!)
    
    var newString = optString!
    print(newString)
    
} else {
    print("optString is nil")
}
var meta = Optional (" ")

var type: String
var monsterTwoType: String? = "–¢—Ä–æ–ª–ª—å"
monsterTwoType = "uta"
 type = monsterTwoType!
print(monsterTwoType)

// CONTROL FLOW

var logicVar = false
if !logicVar {
print("logicVar - true")
} else {
    print("logicVar - false")
}

var first = true
var second = false
var third = true
if  !first || second {
    print("one is true")
} else if !second && third {
    print("both is true")
} else {
    print("one is false")
}


// —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã

var tenantCount = 315
var rentPrice = 0
 if tenantCount < 10 {
    rentPrice = 1000
} else if tenantCount >= 10 && tenantCount <= 30 {
    rentPrice = 800
} else {
    rentPrice = 600
    print(rentPrice)
}
var allPrice = rentPrice * tenantCount
print("I earned my $\(allPrice)")



/* –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞
 —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º */
var trollsCount: Int? = 8
if trollsCount == nil {
    print("–¢—Ä–æ–ª–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
} else {
    // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–ª–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç—Ä–æ–ª–ª—è
    var potCountForTroll = 2
    var allPotsCount = potCountForTroll * trollsCount!
}


var monstersCount: Int?
 var monsters = 5
if var monsters = monstersCount {
print("–í—Å–µ–≥–æ \(monsters) –º–æ–Ω—Å—Ç—Ä–æ–≤")
     } else {
     print("–¢—Ä–æ–ª–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
}
 monsters

var coinsInNewChest = "124"
var allCoinsCount = 1301
if Int(coinsInNewChest) != nil {
    allCoinsCount += Int(coinsInNewChest)!
} else {
    print(" —É –Ω–æ–≤–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–æ–ª–æ—Ç–æ")
}

//–°–∏–Ω—Ç–∞–∫—Å–∏—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ switch


/* –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∏–ø–∞ Int
 —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ü–µ–Ω–∫—É, –ø–æ–ª—É—á–µ–Ω–Ω—É—é
 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
var userMark = 4
 –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é if-else
 –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
 –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–∏ÃÜ userMark –∏ –≤—ã–≤–æ–¥–∞
 –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
if userMark == 1 {
    print("–ï–¥–∏–Ω–∏—Ü–∞ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ! –≠—Ç–æ —É–∂–∞—Å–Ω–æ!")
} else if userMark == 2 {
    print("–° –¥–≤–æ–∏ÃÜ–∫–æ–∏ÃÜ —Ç—ã –æ—Å—Ç–∞–Ω–µ—à—å—Å—è –Ω–∞ –≤—Ç–æ—Ä–æ–∏ÃÜ –≥–æ–¥!")
    
} else if userMark == 3 {
        print("–¢—ã –ø–ª–æ—Ö–æ —É—á–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª –≤ —ç—Ç–æ–º –≥–æ–¥—É!")
}  else if userMark == 4 {
            print("–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –º–æ–≥–ª–æ –±—ã—Ç—å –∏ –ª—É—á—à–µ")
}       else if userMark == 5 {
                print("–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ —Ç–µ–±–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–æ!")
}*/

/*var userMark = 4
if userMark == 1 {
    print("very bad")
} else if userMark == 2 {
    print("bad")
}  else if userMark == 3 {
    print("udo")
} else if userMark == 4 {
    print("good")
} else if userMark == 5 {
print("OK")
}
*/

var userMark = 4
switch userMark {
case 1:
    print("very bad")
case 2:
    print("bad")
case 3:
    print("udo")
case 4:
    print("good")
case 5:
    print("OK")
default:
    break
}


//var userMark = 6
//switch userMark{
//case 1..<3:
//print("very bad")
//case 3...5:
//print("OK")
//default:
//    
//    print( "6 is overmark")
//}


var dragonData  = ("green", 2.4)
switch dragonData {
    case ("green", 0..<2):
            print("insert dragon in box 1")
    case ("red", 0..<2):
            print("insert dragon in box 2")
//case ("green", let weight) where weight >= 2:
//print("insert dragon in box 3")
//case ("red", let weight) where weight >= 2:
//print ("insert dragon in box3")
    case let(color, weight) where (color == "green" || color ==
            "red") && weight >= 2:
            print("–ü–æ–º–µ—Å—Ç–∏—Ç–µ –¥—Ä–∞–∫–æ–Ω–∞ –≤ –∑–∞–≥–æ–Ω 3")
    default:
            print("dragon has an unknown parameters")
}

//typealias Operation = (Float, Float, Character)

typealias Operation = (opOne:Float, opTwo:Float, operation:Character)
let myTuple: Operation = (5.2, 4.3, "+")
var (opOne, opTwo, operation) = myTuple
opOne = 34
switch operation  {
    case "+":
    opOne + opTwo
    case "-":
        print(opOne - opTwo)
    case "*":
        print(opOne * opTwo)
    case "/":
        print(opOne / opTwo)
default:
    print("its uncorrect operation")
}

//Collection Types - Chessman

typealias Chessman =  [String:(alpha:Character, num:Int)!]
    var Chessmans : Chessman = ["whiteTura": ("b", 6), "whiteHorse": ("c", 9), "whiteKing": nil ]
    if  Chessmans["whiteTura"]! != nil {
        print("whiteTura at \(Chessmans ["whiteTura"]!)")
}   else {
            print("whiteTura is killed")
}

    if  Chessmans["whiteHorse"]! != nil {
            print("whiteHorse at \(Chessmans ["whiteHorse"]!) ")
}   else {
            print("whiteHorse is killed")

}
    if  Chessmans["whiteKing"]!  != nil {
            print("whiteKing at \(Chessmans ["whiteKing"]!) ")
}   else {
            print("whiteKing is killed")
}

// LOOPS

//for in


//      for –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è in –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å {
//      –±–ª–æ–∫_–∫–æ–¥–∞ }


let myName = "Troll"
for oneChar in myName.characters {
    print(oneChar)
}



var countrysAndBlocks = ["–†–æ—Å—Å–∏—è": "–ï–ê–≠–°", "–°–®–ê": "–ù–ê–¢–û",
                         "–§—Ä–∞–Ω—Ü–∏—è":"–ï–°"]
for (countryName, blockName) in countrysAndBlocks {
    print("\(countryName) –≤—Å—Ç—É–ø–∏–ª–∞ –≤ \(blockName)")
}


var myMusicStyles = ["Rock", "Jazz", "Pop"]
 for (index, musicName) in myMusicStyles.enumerate() {
    print("\(index+1). –Ø –ª—é–±–ª—é \(musicName)")
    }


//–≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã

// —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–≥—Ä
    var resultsOfGames = ["Red Wings":["2:1","2:3"],
                        "Capitals":["3:6","5:5"],"Penguins":["3:3","1:2"]]
 // –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–≤–∞—Ä—è
     for (teamName, results) in resultsOfGames {
    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     for oneResult in results {
        print("–ò–≥—Ä–∞ —Å \(teamName) - \(oneResult)")
        }
}
//–¢–∏–ø–æ–º –º–∞—Å—Å–∏–≤–∞ resultsOfGames —è–≤–ª—è–µ—Ç—Å—è ¬´—Å–ª–æ–≤–∞—Ä—å —Å–ª–æ–≤–∞—Ä–µ–∏ÃÜ¬ª Dictio- nary<String: Dictionary <String>>. –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è teamName –ª–æ–∫–∞–ª—å–Ω–∞, –Ω–æ –≤ –µ–µ –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ø–∞–¥–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–∏ÃÜ —Ü–∏–∫–ª for-in, –ø–æ—ç—Ç–æ–º—É –≤ –¥–∞–Ω–Ω–æ–º —Ü–∏–∫–ª–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –≤—ã–≤–æ–¥–∞ –µ–µ –∑–Ω–∞—á–µ–Ω–∏—è.

//–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è while –∏ repeat while

//–¶–∏–∫–ª while

// while —É—Å–ª–æ–≤–∏–µ {
//–±–ª–æ–∫_–∫–æ–¥–∞ }

// –í–ù–ò–ú–ê–ù–ò–ï –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –ø—Ä–∏ –∑–∞–¥–∞–Ω–∏–∏ —É—Å–ª–æ–≤–∏—è, –ø–æ—Å–∫–æ–ª—å–∫—É –ø–æ –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç–∞–∫–æ–µ —É—Å–ª–æ–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–µ—Ä–Ω–µ—Ç false  –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Ü–∏–∫–ª –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, —á—Ç–æ, –≤–µ—Ä–æ—è—Ç–Ω–æ, –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –∑–∞–≤–∏—Å–∞–Ω–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã


// –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    var i = 1
 // —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ª–æ–∂–µ–Ω–∏—è
var resultSum = 0
    // —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É–º–º—ã
    while i <= 10 {
        resultSum += i
        i += 1
}
resultSum
//–û–ø–µ—Ä–∞—Ç–æ—Ä while ‚Äî —ç—Ç–æ —Ü–∏–∫–ª —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–∏ÃÜ –ø—Ä–æ–≤–µ—Ä–∫–æ–∏ÃÜ —É—Å–ª–æ–≤–∏—è, —Ç–æ –µ—Å—Ç—å –≤–Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —É—Å–ª–æ–≤–∏–µ, –∞ —É–∂–µ –ø–æ—Ç–æ–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–¥.

//–¶–∏–∫–ª repeat while

//–í –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É while –æ–ø–µ—Ä–∞—Ç–æ—Ä repeat while —è–≤–ª—è–µ—Ç—Å—è —Ü–∏–∫–ª–æ–º —Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–∏ÃÜ –ø—Ä–æ–≤–µ—Ä–∫–æ–∏ÃÜ —É—Å–ª–æ–≤–∏—è. –í —Ç–∞–∫–æ–º —Ü–∏–∫–ª–µ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞, –∞ —É–∂–µ –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —É—Å–ª–æ–≤–∏–µ.

//repeat {
//–±–ª–æ–∫_–∫–æ–¥–∞
//} while —É—Å–ª–æ–≤–∏–µ

// –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    var t = 1
    // —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ª–æ–∂–µ–Ω–∏—è
    var resultSumm = 0
 // —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É–º–º—ã
    repeat{
        resultSumm += t
    t += 1
    } while t <= 10
resultSumm

//–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ while –∏ repeat while –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ –∫–æ–¥ —Ç–µ–ª–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ repeat while –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–µ –º–µ–Ω–µ–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞. –¢–æ –µ—Å—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–∏ÃÜ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –≤–µ—Ä–Ω–µ—Ç false, –∫–æ–¥ —Ç–µ–ª–∞ —Ü–∏–∫–ª–∞ –∫ —ç—Ç–æ–º—É –º–æ–º–µ–Ω—Ç—É —É–∂–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.

//  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–∏–∫–ª–∞–º–∏

//–û–ø–µ—Ä–∞—Ç–æ—Ä continue

//–û–ø–µ—Ä–∞—Ç–æ—Ä continue –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ—á–µ—Ä–µ–¥–Ω–æ–∏ÃÜ –∏—Ç–µ—Ä–∞—Ü–∏–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Å–ª–µ–¥—É—é—â–∏–∏ÃÜ –∑–∞ –Ω–∏–º –∫–æ–¥.

for i in 1...10 {
    if i%2 == 0 {
        continue
    } else {
        print(i)
    }
}


//–û–ø–µ—Ä–∞—Ç–æ—Ä break

//–û–ø–µ—Ä–∞—Ç–æ—Ä break –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Ü–∏–∫–ª–∞. –ü—Ä–∏ —ç—Ç–æ–º –≤–µ—Å—å –ø–æ—Å–ª–µ–¥—É—é—â–∏–∏ÃÜ –∫–æ–¥ –≤ —Ç–µ–ª–µ —Ü–∏–∫–ª–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.

//–í –ª–∏—Å—Ç–∏–Ω–≥–µ –¥–µ—Å—è—Ç—å —Ä–∞–∑ —Å–ª—É—á–∞–∏ÃÜ–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 1 –¥–æ 10. –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ —Ä–∞–≤–Ω–æ 5, —Ç–æ –Ω–∞ –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.


//import Foundation
for i in 1...10 {
    var  randNum = Int(arc4random_uniform(10))
    if randNum == 5 {
        print("–ò—Ç–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä \(i)")
        break
    }
}
//–í—Å–µ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã–µ –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —è–≤–ª—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–∏ÃÜ –∏—Ç–µ—Ä–∞—Ü–∏–∏, —Ç–æ –µ—Å—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–∏ÃÜ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω–∞—è –ø–µ—Äe–º–µ–Ω–Ω–∞—è –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞

//–ú–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å —Å–∏—Ç—É–∞—Ü–∏—è, –∫–æ–≥–¥–∞ –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ü–∏–∫–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ //–ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ, ‚Äî –¥–ª—è —ç—Ç–æ–≥–æ –≤ Swift —Å—É—â–µ—Å—Ç–≤—É—é—Ç –º–µ—Ç–∫–∏

mainLoop: for u in 1...5 {
    for z in u...5 {
        if z == 4 && u == 2 {
            break mainLoop
        }
        print("\(u) - \(z)")
    }
}


//–ó–∞–¥–∞–Ω–∏–µ 147
//typealias markes = [String: [String: UInt]]
//    var register: markes = ["Petrov": ["date1": 3, "date2": 4 ], "Ivanov": ["date1": 4, "date2": 5], "Sidorov": ["date1": 4, "date2": 2]]
////
//    for    ?    in register {
//        
//            for var ?  in name {
//
//        
//        print(" \(name) –ø–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª \(middleMarkPetrov) ")
//    }
//}
//
//
var register4 = [ "Petrov": ["Physics": 5, "Geometry": 3, "Algebra": 4], "Ivanov": ["Physics": 3, "Geometry": 5, "Algebra": 5]]

for pupil in register4 {
    let pupilMarks = pupil.1
    var sum: Float = 0.0
    for mark in pupilMarks {
        sum = sum + Float(mark.1)
    }
    let averageMark = sum / Float(pupilMarks.count)
    
    print("\(pupil.0) –ø–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª \(averageMark)")
}

//Vorona

let register = [
    "Petrov": ["Physics": 5, "Geometry": 3, "Algebra": 4],
    "Ivanov": ["Physics": 3, "Geometry": 5, "Algebra": 5]
]

let results = register.map { student -> String in
    let classes = student.1                                 // –ø–æ–ª—É—á–∏–ª–∏ —É—Ä–æ–∫–∏
    let total = classes
        .map { $0.1 }                                       // –ø–æ–ª—É—á–∏–ª–∏ –æ—Ü–µ–Ω–∫–∏
        .reduce(0, combine: +)                          // –ø—Ä–æ—Å—É–º–º–∏—Ä–æ–≤–∞–ª–∏ –æ—Ü–µ–Ω–∫–∏
    let average = Double(total) / Double(classes.count)     // –≤—ã—Å—á–∏—Ç–∞–ª–∏ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
    return "\(student.0) –ø–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª \(average)"  // –≤–µ—Ä–Ω—É–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
}

results.forEach { print($0) }                               // –≤—ã–≤–µ–ª–∏ –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å


